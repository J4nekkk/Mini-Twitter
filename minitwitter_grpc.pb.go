// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc3
// source: minitwitter.proto

package Mini_Twitterek

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Twitter_SendTweet_FullMethodName = "/minitwitter.Twitter/SendTweet"
	Twitter_GetTweet_FullMethodName  = "/minitwitter.Twitter/GetTweet"
)

// TwitterClient is the client API for Twitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitterClient interface {
	SendTweet(ctx context.Context, in *Tweet, opts ...grpc.CallOption) (*Empty, error)
	GetTweet(ctx context.Context, in *TweetLicz, opts ...grpc.CallOption) (Twitter_GetTweetClient, error)
}

type twitterClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterClient(cc grpc.ClientConnInterface) TwitterClient {
	return &twitterClient{cc}
}

func (c *twitterClient) SendTweet(ctx context.Context, in *Tweet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Twitter_SendTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetTweet(ctx context.Context, in *TweetLicz, opts ...grpc.CallOption) (Twitter_GetTweetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Twitter_ServiceDesc.Streams[0], Twitter_GetTweet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterGetTweetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Twitter_GetTweetClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type twitterGetTweetClient struct {
	grpc.ClientStream
}

func (x *twitterGetTweetClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwitterServer is the server API for Twitter service.
// All implementations must embed UnimplementedTwitterServer
// for forward compatibility
type TwitterServer interface {
	SendTweet(context.Context, *Tweet) (*Empty, error)
	GetTweet(*TweetLicz, Twitter_GetTweetServer) error
	mustEmbedUnimplementedTwitterServer()
}

// UnimplementedTwitterServer must be embedded to have forward compatible implementations.
type UnimplementedTwitterServer struct {
}

func (UnimplementedTwitterServer) SendTweet(context.Context, *Tweet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTweet not implemented")
}
func (UnimplementedTwitterServer) GetTweet(*TweetLicz, Twitter_GetTweetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (UnimplementedTwitterServer) mustEmbedUnimplementedTwitterServer() {}

// UnsafeTwitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitterServer will
// result in compilation errors.
type UnsafeTwitterServer interface {
	mustEmbedUnimplementedTwitterServer()
}

func RegisterTwitterServer(s grpc.ServiceRegistrar, srv TwitterServer) {
	s.RegisterService(&Twitter_ServiceDesc, srv)
}

func _Twitter_SendTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).SendTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Twitter_SendTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).SendTweet(ctx, req.(*Tweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetTweet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TweetLicz)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitterServer).GetTweet(m, &twitterGetTweetServer{stream})
}

type Twitter_GetTweetServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type twitterGetTweetServer struct {
	grpc.ServerStream
}

func (x *twitterGetTweetServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

// Twitter_ServiceDesc is the grpc.ServiceDesc for Twitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Twitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minitwitter.Twitter",
	HandlerType: (*TwitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTweet",
			Handler:    _Twitter_SendTweet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTweet",
			Handler:       _Twitter_GetTweet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minitwitter.proto",
}
